The bad:

- Promotes group think. Loss of individual ideas.
	* Concensus often means lowest common denominator (i.e. watered down idea)
	* Best ideas are often the result of one person. Other ways to get concensus is to have code reviews or vet your ideas with others.

- Each developer works has their own "best" setup
	* Vim (with vimrc), ReSharper, 1 vs. 2 screens, etc.
	* Have to come in at the same time, for example. Penalties if you don't. Everyone works differently. (see "How GitHub works" articles - code is a creative endeavor - not everyone is creative at the same time).
	* I love to block out distractions and listen to music. Other devs prefer silence to think.
	* http://zachholman.com/posts/how-github-works-asynchronous/ - "In the zone"

- Rest of team held to different standards.
	* Only pairing developers have to be in at the same time. And have to be in the office.
	* QA/BA can work from home, come in whenever.
	
- Feel like you get worse at your craft
	* Spend less actual time coding
	* Don't use the toolset I've grown quite accustomed to
	* I've coded at home and I found myself struggling with what was my optimal setup. So I just don't code at home anymore.

- Haven't seen any noticeable improvements in code quality
	* This is often one of the biggest selling points of pairing.
	* There are still bugs (same amount as other projects). There are still dingy areas of code that no one wants to touch and are hard to change/maintain. There are still poor design decisions that are made in the interest of time or for other reasons.
		- Large codebases also have lots of bugs. Maybe smaller codebase means pairing not necessary?
			* http://www.codinghorror.com/blog/2007/12/size-is-the-enemy.html
			* http://steve-yegge.blogspot.com/2007/12/codes-worst-enemy.html
	* Two brains doesn't NECESSARILY equate to double brain power on a given task.
	* In fact, disagreements about design decisions within a pair cause friction so either:
		- You have them and the pairing session suffers, OR
		- You choose not to bring them up and the design suffers
		- AGAIN - I believe code reviews and other techniques can solve these problems.
	* http://c2.com/cgi/wiki?PairProgrammingBenefits - "Also, LaurieWilliams famously demonstrated improved quality for slightly more effort in her The Collaborative Software Process paper (available at http://collaboration.csc.ncsu.edu/laurie/Papers/dissertation.pdf) [Is this the right one?]. A result that nobody else has been able to recreate since. Laurie is also the author of a book on the benefits of Pair Programming...... "

- Pairing on mundane "non-pair worthy tasks".
	* deleting a bunch of files off a local development machine.
		- One person deleting, another person staring.
	* tasks which are "new" and require studying.
		- Told to break the pair and study alone and then come back and discuss. But this isn't done in practice. There's an unspoken "always be pairing" feeling that neither member wants to broach.
		- http://mwilden.blogspot.com/2009/11/why-i-dont-like-pair-programming-and.html - "Pair programming doesn't encourage quiet reflection and exploration. You can't just sit back and read some code. You can't just sit and think. I mean, you can, but then your pair is just sitting there. If you both agree that such contemplation is necessary, that's fine, but what if your pair is perfectly happy with an existing way? You don't want to waste their time. You don't want to argue (unless the other person wants to as well). You give in more often than if you were working alone."

- Sometimes pairing isn't pairing, but is really "watching someone else code" or "coding while your pair sleeps".
	* I've been on both sides of this. I think it shows the natural desire of each developer to work on their own.
	* One person, often the person with more system experience, will code and code and never tag in the other pair member. If the other pair member doesn't want to rock the boat, they won't ask for control and the session really becomes one programmer coding and the other quietly feeling left out.
	* http://pragprog.com/magazines/2011-07/pair-programming-benefits -  "If you are the weakest player on the team, you will find that pairing gives you an opportunity to learn from your teammates." <-- not true. people have been removed from teams for not being able to code.


The good:
- You do get up to speed on a new system quicker.
	* Pairing to start is a good idea. w/ someone with more system knowledge.
		- I'm not against the practice of putting multiple heads together to solve a particular problem. It's more the act of always doing it or of regulating it.
- When doing TDD cycles, it works well.
	* Ping ponging on new code where someone writes a test, the other makes it pass - that is a good flow.
		- Unfortunately, most code is not like this. A lot of maintenance and other tasks come up that don't follow this flow.
- Less interruptions.


Alternatives:
Code reviews. Chat rooms.
Check "How GitHub Works articles".
