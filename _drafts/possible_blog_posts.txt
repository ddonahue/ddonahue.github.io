POSSIBLE FUTURE BLOG POST TOPICS:

- Your experiences as a job hopper
	* Pros/Cons
	* Misconceptions
	* Reference other blog posts
	* Discuss both technical aspects and why management understandably doesn't like it.
	* Any insight gained for employers for how to keep people? Or is it unreasonable? Explain your thoughts on this.


- Breaking a problem down. Most devs, including myself, don't go deep enough.
	* Rich Hickey quote
	* Talk about benefits of reusability but ALSO hiding what you DON'T care about.
		- Get users, find users that fit criteria, send them an email.
		- When change comes in to now text them too, you want to be able to add that change to one place. You also want to be able to know EXACTLY where you need to change.. reading through bunches of code to find the part that does what you're looking to change is harder.
		- Breaking a feature into small enough chunks means you can see the algorithm without understanding the minituae.
	* Related to devs being scared of classes (future blog post).

- Unit testing at the wrong level of abstraction.
	* Developers create test fixtures per class. This is the wrong level of abstraction. A "unit" in unit testing is"the smallest testable part of an application". This is often thought of as the class, but can often be a single method. (http://en.wikipedia.org/wiki/Unit_testing)
	* A "test fixture" is a fixed state of the software under test used as a baseline for running tests; also known as a "test context". (http://en.wikipedia.org/wiki/Test_fixture)
	* Given this information, it may actually be a better abstraction to have a test fixture for each context that you want to test. This is not a new idea. Look up BDD in NUnit - find examples.
		- http://programmaticallyspeaking.com/one-assertion-per-test-please.html
		- MSpec
	* Results in more test fixtures (classes) but each one represents a separate context.
	* The converse is that very often context setup code ends up duplicated in many different test cases.

- Different aspects from Udi Dahan course.

- No best practices. Only "very good practices given a certain context."
	* http://www.satisfice.com/blog/archives/27

- OOP programmers being scared of classes.
